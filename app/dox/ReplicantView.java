//******************************************************************************
// File     : ReplicantView.java
// Author   : jpl
// Created  : 22/09/11 15:43
// Modified : 17/10/11 16:58
//******************************************************************************
package replicant;

import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.net.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JComponent;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.KeyStroke;
import javax.swing.ListModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * The application's main frame.
 */
public class ReplicantView extends FrameView
{

   public ReplicantView(SingleFrameApplication app)
   {
      super(app);
      initComponents();
      initRPL();
   }

   @Action
   public void showAboutBox()
   {
      if (aboutBox == null)
      {
         JFrame mainFrame = ReplicantApp.getApplication().getMainFrame();
         aboutBox = new ReplicantAboutBox(mainFrame);
         aboutBox.setLocationRelativeTo(mainFrame);
      }
      ReplicantApp.getApplication().show(aboutBox);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      menuBar = new javax.swing.JMenuBar();
      javax.swing.JMenu fileMenu = new javax.swing.JMenu();
      javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
      javax.swing.JMenu helpMenu = new javax.swing.JMenu();
      javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
      jSplitPane1 = new javax.swing.JSplitPane();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      pnlStack = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      lstStack = new javax.swing.JList();
      pnlFixed = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      lblPrompt = new javax.swing.JLabel();
      lblReg4 = new javax.swing.JLabel();
      lblReg3 = new javax.swing.JLabel();
      lblReg2 = new javax.swing.JLabel();
      lblReg1 = new javax.swing.JLabel();
      pnlGraph = new javax.swing.JPanel();
      pnlCatalog = new javax.swing.JPanel();
      jScrollPane3 = new javax.swing.JScrollPane();
      jtrCatalog = new javax.swing.JTree();
      pnlPrograms = new javax.swing.JPanel();
      pnlConsole = new javax.swing.JScrollPane();
      pnlSetup = new javax.swing.JPanel();
      pnlHelp = new javax.swing.JScrollPane();
      pnlHTML = new javax.swing.JTextPane();
      jPanel4 = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      txtEntry = new javax.swing.JTextArea();
      lblStatus = new javax.swing.JLabel();
      lblDepth = new javax.swing.JLabel();
      lblAngularMode = new javax.swing.JLabel();
      lblDisplayMode = new javax.swing.JLabel();

      menuBar.setName("menuBar"); // NOI18N

      org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(replicant.ReplicantApp.class).getContext().getResourceMap(ReplicantView.class);
      fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
      fileMenu.setName("fileMenu"); // NOI18N

      javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(replicant.ReplicantApp.class).getContext().getActionMap(ReplicantView.class, this);
      exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
      exitMenuItem.setName("exitMenuItem"); // NOI18N
      fileMenu.add(exitMenuItem);

      menuBar.add(fileMenu);

      helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
      helpMenu.setName("helpMenu"); // NOI18N

      aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
      aboutMenuItem.setName("aboutMenuItem"); // NOI18N
      helpMenu.add(aboutMenuItem);

      menuBar.add(helpMenu);

      jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
      jSplitPane1.setName("jSplitPane1"); // NOI18N
      jSplitPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
         public void componentResized(java.awt.event.ComponentEvent evt) {
            jSplitPane1ComponentResized(evt);
         }
      });

      jTabbedPane1.setName("jTabbedPane1"); // NOI18N

      pnlStack.setName("pnlStack"); // NOI18N

      jScrollPane2.setName("jScrollPane2"); // NOI18N

      lstStack.setBackground(resourceMap.getColor("lstStack.background")); // NOI18N
      lstStack.setFont(resourceMap.getFont("lstStack.font")); // NOI18N
      lstStack.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      lstStack.setName("lstStack"); // NOI18N
      lstStack.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            lstStackMouseClicked(evt);
         }
      });
      jScrollPane2.setViewportView(lstStack);

      javax.swing.GroupLayout pnlStackLayout = new javax.swing.GroupLayout(pnlStack);
      pnlStack.setLayout(pnlStackLayout);
      pnlStackLayout.setHorizontalGroup(
         pnlStackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
      );
      pnlStackLayout.setVerticalGroup(
         pnlStackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
      );

      jTabbedPane1.addTab(resourceMap.getString("pnlStack.TabConstraints.tabTitle"), pnlStack); // NOI18N

      pnlFixed.setBackground(resourceMap.getColor("pnlFixed.background")); // NOI18N
      pnlFixed.setName("pnlFixed"); // NOI18N

      jLabel1.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
      jLabel1.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
      jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
      jLabel1.setName("jLabel1"); // NOI18N

      jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
      jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
      jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
      jLabel2.setName("jLabel2"); // NOI18N

      jLabel3.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
      jLabel3.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
      jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
      jLabel3.setName("jLabel3"); // NOI18N

      lblPrompt.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
      lblPrompt.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
      lblPrompt.setText(resourceMap.getString("lblPrompt.text")); // NOI18N
      lblPrompt.setName("lblPrompt"); // NOI18N

      lblReg4.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
      lblReg4.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
      lblReg4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
      lblReg4.setText(resourceMap.getString("lblReg4.text")); // NOI18N
      lblReg4.setName("lblReg4"); // NOI18N

      lblReg3.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
      lblReg3.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
      lblReg3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
      lblReg3.setText(resourceMap.getString("lblReg3.text")); // NOI18N
      lblReg3.setName("lblReg3"); // NOI18N

      lblReg2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
      lblReg2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
      lblReg2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
      lblReg2.setText(resourceMap.getString("lblReg2.text")); // NOI18N
      lblReg2.setName("lblReg2"); // NOI18N

      lblReg1.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
      lblReg1.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
      lblReg1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
      lblReg1.setText(resourceMap.getString("lblReg1.text")); // NOI18N
      lblReg1.setName("lblReg1"); // NOI18N

      javax.swing.GroupLayout pnlFixedLayout = new javax.swing.GroupLayout(pnlFixed);
      pnlFixed.setLayout(pnlFixedLayout);
      pnlFixedLayout.setHorizontalGroup(
         pnlFixedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(pnlFixedLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlFixedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(pnlFixedLayout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(lblReg4, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
               .addGroup(pnlFixedLayout.createSequentialGroup()
                  .addComponent(jLabel2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(lblReg3, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
               .addGroup(pnlFixedLayout.createSequentialGroup()
                  .addComponent(jLabel3)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(lblReg2, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
               .addGroup(pnlFixedLayout.createSequentialGroup()
                  .addComponent(lblPrompt)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(lblReg1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)))
            .addContainerGap())
      );
      pnlFixedLayout.setVerticalGroup(
         pnlFixedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(pnlFixedLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlFixedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(lblReg4))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlFixedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(lblReg3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlFixedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(lblReg2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlFixedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblPrompt)
               .addComponent(lblReg1))
            .addContainerGap(41, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab(resourceMap.getString("pnlFixed.TabConstraints.tabTitle"), pnlFixed); // NOI18N

      pnlGraph.setName("pnlGraph"); // NOI18N

      javax.swing.GroupLayout pnlGraphLayout = new javax.swing.GroupLayout(pnlGraph);
      pnlGraph.setLayout(pnlGraphLayout);
      pnlGraphLayout.setHorizontalGroup(
         pnlGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 426, Short.MAX_VALUE)
      );
      pnlGraphLayout.setVerticalGroup(
         pnlGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 154, Short.MAX_VALUE)
      );

      jTabbedPane1.addTab(resourceMap.getString("pnlGraph.TabConstraints.tabTitle"), pnlGraph); // NOI18N

      pnlCatalog.setName("pnlCatalog"); // NOI18N

      jScrollPane3.setName("jScrollPane3"); // NOI18N

      jtrCatalog.setName("jtrCatalog"); // NOI18N
      jScrollPane3.setViewportView(jtrCatalog);

      javax.swing.GroupLayout pnlCatalogLayout = new javax.swing.GroupLayout(pnlCatalog);
      pnlCatalog.setLayout(pnlCatalogLayout);
      pnlCatalogLayout.setHorizontalGroup(
         pnlCatalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
      );
      pnlCatalogLayout.setVerticalGroup(
         pnlCatalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
      );

      jTabbedPane1.addTab(resourceMap.getString("pnlCatalog.TabConstraints.tabTitle"), pnlCatalog); // NOI18N

      pnlPrograms.setName("pnlPrograms"); // NOI18N

      javax.swing.GroupLayout pnlProgramsLayout = new javax.swing.GroupLayout(pnlPrograms);
      pnlPrograms.setLayout(pnlProgramsLayout);
      pnlProgramsLayout.setHorizontalGroup(
         pnlProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 426, Short.MAX_VALUE)
      );
      pnlProgramsLayout.setVerticalGroup(
         pnlProgramsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 154, Short.MAX_VALUE)
      );

      jTabbedPane1.addTab(resourceMap.getString("pnlPrograms.TabConstraints.tabTitle"), pnlPrograms); // NOI18N

      pnlConsole.setName("pnlConsole"); // NOI18N
      jTabbedPane1.addTab(resourceMap.getString("pnlConsole.TabConstraints.tabTitle"), pnlConsole); // NOI18N

      pnlSetup.setName("pnlSetup"); // NOI18N

      javax.swing.GroupLayout pnlSetupLayout = new javax.swing.GroupLayout(pnlSetup);
      pnlSetup.setLayout(pnlSetupLayout);
      pnlSetupLayout.setHorizontalGroup(
         pnlSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 426, Short.MAX_VALUE)
      );
      pnlSetupLayout.setVerticalGroup(
         pnlSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 154, Short.MAX_VALUE)
      );

      jTabbedPane1.addTab(resourceMap.getString("pnlSetup.TabConstraints.tabTitle"), pnlSetup); // NOI18N

      pnlHelp.setName("pnlHelp"); // NOI18N

      pnlHTML.setName("pnlHTML"); // NOI18N
      pnlHelp.setViewportView(pnlHTML);

      jTabbedPane1.addTab(resourceMap.getString("pnlHelp.TabConstraints.tabTitle"), pnlHelp); // NOI18N

      jSplitPane1.setTopComponent(jTabbedPane1);

      jPanel4.setName("jPanel4"); // NOI18N

      jScrollPane1.setName("jScrollPane1"); // NOI18N

      txtEntry.setColumns(20);
      txtEntry.setLineWrap(true);
      txtEntry.setRows(5);
      txtEntry.setName("txtEntry"); // NOI18N
      txtEntry.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            txtEntryKeyPressed(evt);
         }
      });
      jScrollPane1.setViewportView(txtEntry);

      lblStatus.setText(resourceMap.getString("lblStatus.text")); // NOI18N
      lblStatus.setToolTipText(resourceMap.getString("lblStatus.toolTipText")); // NOI18N
      lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      lblStatus.setName("lblStatus"); // NOI18N

      lblDepth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      lblDepth.setText(resourceMap.getString("lblDepth.text")); // NOI18N
      lblDepth.setToolTipText(resourceMap.getString("lblDepth.toolTipText")); // NOI18N
      lblDepth.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      lblDepth.setName("lblDepth"); // NOI18N

      lblAngularMode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      lblAngularMode.setText(resourceMap.getString("lblAngularMode.text")); // NOI18N
      lblAngularMode.setToolTipText(resourceMap.getString("lblAngularMode.toolTipText")); // NOI18N
      lblAngularMode.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      lblAngularMode.setName("lblAngularMode"); // NOI18N

      lblDisplayMode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      lblDisplayMode.setText(resourceMap.getString("lblDisplayMode.text")); // NOI18N
      lblDisplayMode.setToolTipText(resourceMap.getString("lblDisplayMode.toolTipText")); // NOI18N
      lblDisplayMode.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      lblDisplayMode.setName("lblDisplayMode"); // NOI18N

      javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
      jPanel4.setLayout(jPanel4Layout);
      jPanel4Layout.setHorizontalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
         .addGroup(jPanel4Layout.createSequentialGroup()
            .addComponent(lblDepth, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblAngularMode, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblDisplayMode, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );
      jPanel4Layout.setVerticalGroup(
         jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(lblDepth)
               .addComponent(lblAngularMode)
               .addComponent(lblDisplayMode)))
      );

      jSplitPane1.setRightComponent(jPanel4);

      setComponent(jSplitPane1);
      setMenuBar(menuBar);
      setStatusBar(lblStatus);
   }// </editor-fold>//GEN-END:initComponents

   private void txtEntryKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtEntryKeyPressed
   {//GEN-HEADEREND:event_txtEntryKeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER)
      {
         ParseEntry();
      }

      if (evt.getKeyCode() == KeyEvent.VK_F9)
      {
         System.out.println("I = "+ReplicantApp.iCommands);
         if (ReplicantApp.iCommands >= 0)
         {
            txtEntry.setText(ReplicantApp.commands.get(ReplicantApp.iCommands));
            ReplicantApp.iCommands--;
            if (ReplicantApp.iCommands < 0)
            {
               ReplicantApp.iCommands = ReplicantApp.commands.size() - 1;
            }
         }
         else
            Beep();
      }

      if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)
      {
         ReplicantApp.PgmRunning = false;
      }
   }//GEN-LAST:event_txtEntryKeyPressed

   private void lstStackMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lstStackMouseClicked
   {//GEN-HEADEREND:event_lstStackMouseClicked
      if (evt.getClickCount() == 2)
      {
         int index = lstStack.locationToIndex(evt.getPoint());
         ListModel dlm = lstStack.getModel();
         try
         {
            Object item = dlm.getElementAt(index);
            lstStack.ensureIndexIsVisible(index);
            String s = item.toString().substring(item.toString().indexOf(": ") + 2);

            // display to stdout
            System.out.println("Double clicked on " + s);

            // add to text entry
            txtEntry.insert(s, txtEntry.getCaretPosition());

            // copy to clipboard
            StringSelection strsel = new StringSelection(s);
            Clipboard clbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
            clbrd.setContents(strsel, strsel);
         } catch (Exception e)
         {
            System.out.println("Nothing to select");
         }
      }
   }//GEN-LAST:event_lstStackMouseClicked

   private void jSplitPane1ComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jSplitPane1ComponentResized
   {//GEN-HEADEREND:event_jSplitPane1ComponentResized
      Display(ReplicantApp.RPLStatus);
   }//GEN-LAST:event_jSplitPane1ComponentResized
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JSplitPane jSplitPane1;
   private javax.swing.JTabbedPane jTabbedPane1;
   public static javax.swing.JTree jtrCatalog;
   private static javax.swing.JLabel lblAngularMode;
   private static javax.swing.JLabel lblDepth;
   private static javax.swing.JLabel lblDisplayMode;
   public static javax.swing.JLabel lblPrompt;
   public static javax.swing.JLabel lblReg1;
   public static javax.swing.JLabel lblReg2;
   public static javax.swing.JLabel lblReg3;
   public static javax.swing.JLabel lblReg4;
   private static javax.swing.JLabel lblStatus;
   private static javax.swing.JList lstStack;
   private javax.swing.JMenuBar menuBar;
   private javax.swing.JPanel pnlCatalog;
   private javax.swing.JScrollPane pnlConsole;
   public static javax.swing.JPanel pnlFixed;
   private javax.swing.JPanel pnlGraph;
   private javax.swing.JTextPane pnlHTML;
   private javax.swing.JScrollPane pnlHelp;
   private javax.swing.JPanel pnlPrograms;
   private javax.swing.JPanel pnlSetup;
   private javax.swing.JPanel pnlStack;
   public static javax.swing.JTextArea txtEntry;
   // End of variables declaration//GEN-END:variables
   private JDialog aboutBox;

//******************************************************************************
// initRPL()
//******************************************************************************
   private void initRPL()
   {
      // bind nice icon to this window
      Frame frame = this.getFrame();
      getFrame().setIconImage(frame.getToolkit().getImage(getClass().getResource("resources/calculator_icon.png")));

      // no enter echo on text entry
      txtEntry.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "none");

      // load help file
      try
      {
         URL url = getClass().getResource("resources/help.html");
         pnlHTML.setPage(url);
      } catch (Exception e)
      {
         System.out.println("Error " + e.toString());
      }

      // load previous backups (if any)
      String msg = "Ok";
      if (ReplicantApp.ReadProps() != 0)
      {
         msg = "Prefs Lost";
      }
      if (ReplicantApp.RestoreNames() != 0)
      {
         msg = "Names Lost";
      }
      if (ReplicantApp.RestoreStack() != 0)
      {
         msg = "Memory Lost";
      }

      // build the name's tree
      BuildTreeNames();

      // update display
      Display(msg);
   }

//******************************************************************************
// Display()
//******************************************************************************
   public static void Display(String msg)
   {
      ReplicantApp.stack.toJList(lstStack);
      ReplicantApp.stack.toFixedDisplay();
      lblAngularMode.setText(Character.toString(ReplicantApp.RPLAngularMode));
      lblDepth.setText(String.valueOf(ReplicantApp.stack.depth()));
      lblDisplayMode.setText(Character.toString(ReplicantApp.RPLDisplayMode));
      lblStatus.setText(msg);
      ReplicantApp.RPLStatus = msg;
   }

//******************************************************************************
// ParseEntry()
//******************************************************************************
   private void ParseEntry()
   {
      ReplicantApp.RPLError rc = ReplicantApp.RPLError.value("Ok");
      String e = txtEntry.getText();
      ReplicantApp.commands.add(e);
      ReplicantApp.iCommands++;

      if (e.isEmpty())
      {
         rc = WhatToDoWith("DUP");
      } else
      {
         // split token between spaces, taking care of simple and double quotes
         List<String> matchList = new ArrayList<String>();
         Pattern regex = Pattern.compile("[^\\s\"']+|\"[^\"]*\"|'[^']*'");
         Matcher regexMatcher = regex.matcher(e);
         while (regexMatcher.find())
         {
            matchList.add(regexMatcher.group());
         }

         // browse the splitted tokens
         Iterator i = matchList.iterator();
         while (i.hasNext())
         {
            rc = WhatToDoWith(i.next().toString());
         }
      }

      // cleanup and display
      // txtEntry.setText("");
      Display(rc.toString());
   }

//******************************************************************************
// WhatToDoWith()
//******************************************************************************
   /**
   Dispatch the token read
   @param token
   @return an error code
    */
   public static ReplicantApp.RPLError WhatToDoWith(String token)
   {
      ReplicantApp.RPLError r = ReplicantApp.RPLError.value("OK");
      System.out.println("TOKEN : " + token);

      if (ReplicantApp.RPLRunMode == 'R')
      {
         if (isString(token))
         {
            ReplicantApp.stack.push(token);
         } else if (isName(token))
         {
            RPLName rn = new RPLName(token.substring(1, token.length() - 1));
            ReplicantApp.stack.push(rn);
         } else if (isComplexPolar(token))
         {
            Double u = getReal(token);
            Double v = getImaginary(token);
            RPLComplex rc = new RPLComplex(u, v);
            ReplicantApp.stack.push(rc);
         } else if (isComplexRectangular(token))
         {
            Double u = getReal(token);
            Double v = getImaginary(token);
            RPLComplex rc = new RPLComplex(u, v);
            ReplicantApp.stack.push(rc);
         } else if (isDouble(token))
         {
            ReplicantApp.stack.push(Double.parseDouble(token));
         } else // command
         {
            RPLCommand rc = new RPLCommand(token);
            r = rc.Xeq();
         }
      } else
      {
         if (token.equals(">>"))
         {
            RPLCommand rc = new RPLCommand(token);
            r = rc.Xeq();
         } else
         {
            RPLProgram p = (RPLProgram) ReplicantApp.RPLPrograms.get(ReplicantApp.RPLPrograms.size() - 1);
            p.step.add(token);
         }

      }

      if (r == ReplicantApp.RPLError.value("OK"))
      {
         ReplicantView.txtEntry.setText("");
      }

      return r;
   }

//******************************************************************************
// isString()
//******************************************************************************
   private static boolean isString(Object o)
   {
      Matcher m;
      boolean rc = false;
      // REGEX "[^"\r\n]*"
      // "hello from JP"
      m = Pattern.compile("\"[^\"\r\n]*\"").matcher(o.toString());
      if (m.find())
      {
         rc = true;
         System.out.println("MATCH STRING");
      }
      return rc;
   }

//******************************************************************************
// isName()
//******************************************************************************
   private static boolean isName(Object o)
   {
      Matcher m;
      boolean rc = false;
      // 'variable'
      m = Pattern.compile("'[^ '\n\r\t]*'").matcher(o.toString());
      if (m.find())
      {
         rc = true;
         System.out.println("MATCH NAME");
      }

      return rc;
   }

//******************************************************************************
// isComplexRectangular()
//******************************************************************************
   private static boolean isComplexRectangular(Object o)
   {
      Matcher m;
      boolean rc = false;
      // REGEX \([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?,[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\)
      // (5.2e3,17.2)
      m = Pattern.compile("\\([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?,[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?\\)").matcher(o.toString());
      if (m.find())
      {
         rc = true;
         System.out.println("MATCH COMPLEX RECTANGULAR");
      }

      return rc;
   }

//******************************************************************************
// isComplexPolar()
//******************************************************************************
   private static boolean isComplexPolar(Object o)
   {
      Matcher m;
      boolean rc = false;
      // REGEX \([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?@[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\)
      // (5.2e3@185.5)
      m = Pattern.compile("\\([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?@[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?\\)").matcher(o.toString());
      if (m.find())
      {
         rc = true;
         System.out.println("MATCH COMPLEX POLAR");
      }

      return rc;
   }

//******************************************************************************
// isDouble()
//******************************************************************************
   private static boolean isDouble(Object o)
   {
      Matcher m;
      boolean rc = false;
      // REGEX [-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+
      // m = Pattern.compile("[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?").matcher(o.toString());
      m = Pattern.compile("^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$").matcher(o.toString());
      if (m.find())
      {
         rc = true;
         System.out.println("MATCH DOUBLE");
      }

      return (rc);
   }

//******************************************************************************
// getReal()
   /**
    * Get real part from a complex number input
    * @param Complex Complex number as (real,imag)
    * @return The real part as a double
    */
//******************************************************************************
   private static Double getReal(String Complex)
   {
      Matcher m = Pattern.compile("\\((.*?),").matcher(Complex);
      if (m.find())
      {
         return (Double.parseDouble(m.group(1)));
      } else
      {
         return (0.0);
      }
   }

//******************************************************************************
// getImaginary()
   /**
    * Get imaginary part from a complex number input
    * @param Complex Complex number as (real,imag)
    * @return The imaginary part as a double
    */
//******************************************************************************
   private static Double getImaginary(String Complex)
   {
      Matcher m = Pattern.compile(",(.*?)\\)").matcher(Complex);
      if (m.find())
      {
         return (Double.parseDouble(m.group(1)));
      } else
      {
         return (0.0);
      }
   }

//******************************************************************************
// BuildTreeNames()
//******************************************************************************
   private void BuildTreeNames()
   {
      ReplicantApp.ndeRoot.add(ReplicantApp.ndeDoubles);
      ReplicantApp.ndeRoot.add(ReplicantApp.ndeComplex);
      ReplicantApp.ndeRoot.add(ReplicantApp.ndeMatrix);
      ReplicantApp.ndeRoot.add(ReplicantApp.ndePrograms);

      jtrCatalog.setCellRenderer(new TreeNamesRenderer());

      for (Iterator<RPLName> itr = ReplicantApp.RPLNames.iterator(); itr.hasNext();)
      {
         RPLName n = itr.next();
         if (n.obj.getClass().getName().equals("replicant.RPLProgram"))
         {
            DefaultMutableTreeNode pgm = new DefaultMutableTreeNode(n.name);
            ReplicantApp.ndePrograms.add(pgm);
         }
         if (n.obj.getClass().getName().equals("java.lang.Double"))
         {
            DefaultMutableTreeNode dbl = new DefaultMutableTreeNode(n.name);
            ReplicantApp.ndeDoubles.add(dbl);
         }
      }
      jtrCatalog.setModel(new DefaultTreeModel(ReplicantApp.ndeRoot));
   }

//******************************************************************************
// Beep()
//******************************************************************************
   public void Beep()
   {
      try
      {
         InputStream in = getClass().getResourceAsStream("resources/beep.wav");
         Clip clip = AudioSystem.getClip();
         AudioInputStream ais = AudioSystem.getAudioInputStream(in);
         clip.open(ais);
         clip.start();
         System.out.println("Beep !!!");
      }
      catch (Exception ex)
      {
         System.out.println("Beep Error !!! " + ex.toString());
      }
   }
}
